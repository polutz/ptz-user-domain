{"version":3,"sources":["../dist-esnext/AuthUserForm.test.js"],"names":["describe","it","user","userNameOrEmail","password","errors","e","propName","errorMsg","REQUIRED","INVALID_EMAIL","MIN","MAX"],"mappings":"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","file":"AuthUserForm.test.js","sourcesContent":["import { allErrors as allValidationErrors } from '@alanmarcell/ptz-validations';\nimport { containsFind, equal, notContainsFind } from 'ptz-assert';\nimport { authUserForm } from './index';\ndescribe('AuthUserForm', () => {\n    describe('userNameOrEmail', () => {\n        it('Add error when empty userNameOrEmail', () => {\n            const user = authUserForm({ userNameOrEmail: '', password: '' });\n            containsFind(user.errors, e => e.propName === 'userNameOrEmail'\n                && e.errorMsg === allValidationErrors.REQUIRED);\n        });\n        describe('UserName', () => {\n            it('Do not add error when valid username', () => {\n                const user = authUserForm({ userNameOrEmail: 'angeloocana', password: '' });\n                notContainsFind(user.errors, e => e.propName === 'userNameOrEmail'\n                    && e.errorMsg === allValidationErrors.REQUIRED);\n            });\n            it('Should be lowercase', () => {\n                const user = authUserForm({ userNameOrEmail: 'AnGeLoOcAnA', password: '' });\n                equal(user.userNameOrEmail, 'angeloocana');\n            });\n        });\n        describe('Email', () => {\n            it('Add error when invalid email', () => {\n                const user = authUserForm({ userNameOrEmail: 'angeloocana@gmailcom', password: '' });\n                containsFind(user.errors, e => e.propName === 'userNameOrEmail'\n                    && e.errorMsg === allValidationErrors.INVALID_EMAIL);\n            });\n            it('Do not add error when valid email', () => {\n                const user = authUserForm({ userNameOrEmail: 'angeloocana@gmail.com', password: '' });\n                notContainsFind(user.errors, e => e.propName === 'userNameOrEmail'\n                    && e.errorMsg === allValidationErrors.REQUIRED);\n                notContainsFind(user.errors, e => e.propName === 'userNameOrEmail'\n                    && e.errorMsg === allValidationErrors.INVALID_EMAIL);\n            });\n            it('Should be lowercase', () => {\n                const user = authUserForm({ userNameOrEmail: 'AnGeLoOcAnA@gMaIl.CoM', password: '' });\n                equal(user.userNameOrEmail, 'angeloocana@gmail.com');\n            });\n        });\n    });\n    describe('Password', () => {\n        it('Add error when null password', () => {\n            const user = authUserForm({ userNameOrEmail: 'angeloocana', password: null });\n            containsFind(user.errors, e => e.propName === 'password'\n                && e.errorMsg === allValidationErrors.REQUIRED);\n        });\n        it('Add error when empty password', () => {\n            const user = authUserForm({ userNameOrEmail: 'angeloocana', password: '' });\n            containsFind(user.errors, e => e.propName === 'password'\n                && e.errorMsg === allValidationErrors.REQUIRED);\n        });\n        it('Do not add error when valid password', () => {\n            const user = authUserForm({ userNameOrEmail: 'angeloocana', password: 'superSecret' });\n            notContainsFind(user.errors, e => e.propName === 'password'\n                && e.errorMsg === allValidationErrors.REQUIRED);\n        });\n        it('Add error when minlength password', () => {\n            const user = authUserForm({ userNameOrEmail: 'angeloocana', password: 'a' });\n            containsFind(user.errors, e => e.propName === 'password'\n                && e.errorMsg === allValidationErrors.MIN);\n        });\n        it('Add error when maxlength password', () => {\n            const user = authUserForm({\n                userNameOrEmail: 'angeloocana',\n                password: 'labalblhblhbohblabcascjbascijbascjbasclasbclasbash'\n            });\n            containsFind(user.errors, e => e.propName === 'password'\n                && e.errorMsg === allValidationErrors.MAX);\n        });\n    });\n});\n//# sourceMappingURL=AuthUserForm.test.js.map"]}