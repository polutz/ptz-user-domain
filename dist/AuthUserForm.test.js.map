{"version":3,"sources":["../dist-esnext/AuthUserForm.test.js"],"names":["describe","it","user","userNameOrEmail","password","errors","e","propName","errorMsg","REQUIRED","MIN","INVALID_EMAIL","MAX"],"mappings":"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","file":"AuthUserForm.test.js","sourcesContent":["import { containsFind, equal, notContainsFind } from 'ptz-assert';\r\nimport { allErrors as allValidationErrors } from 'ptz-validations';\r\nimport { authUserForm } from './index';\r\ndescribe('AuthUserForm', () => {\r\n    describe('userNameOrEmail', () => {\r\n        it('Add error when empty userNameOrEmail', () => {\r\n            const user = authUserForm({ userNameOrEmail: '', password: '' });\r\n            containsFind(user.errors, e => e.propName === 'userNameOrEmail'\r\n                && e.errorMsg === allValidationErrors.REQUIRED);\r\n        });\r\n        describe('UserName', () => {\r\n            it('Do not add error when valid username', () => {\r\n                const user = authUserForm({ userNameOrEmail: 'angeloocana', password: '' });\r\n                notContainsFind(user.errors, e => e.propName === 'userNameOrEmail'\r\n                    && e.errorMsg === allValidationErrors.REQUIRED);\r\n            });\r\n            it('Add error when invalid MIN username', () => {\r\n                const user = authUserForm({ userNameOrEmail: 'ln', password: '' });\r\n                containsFind(user.errors, e => e.propName === 'userNameOrEmail'\r\n                    && e.errorMsg === allValidationErrors.MIN);\r\n            });\r\n            it('Should be lowercase', () => {\r\n                const user = authUserForm({ userNameOrEmail: 'AnGeLoOcAnA', password: '' });\r\n                equal(user.userNameOrEmail, 'angeloocana');\r\n            });\r\n        });\r\n        describe('Email', () => {\r\n            it('Add error when invalid email', () => {\r\n                const user = authUserForm({ userNameOrEmail: 'angeloocana@gmailcom', password: '' });\r\n                containsFind(user.errors, e => e.propName === 'userNameOrEmail'\r\n                    && e.errorMsg === allValidationErrors.INVALID_EMAIL);\r\n            });\r\n            it('Do not add error when valid email', () => {\r\n                const user = authUserForm({ userNameOrEmail: 'angeloocana@gmail.com', password: '' });\r\n                notContainsFind(user.errors, e => e.propName === 'userNameOrEmail'\r\n                    && e.errorMsg === allValidationErrors.REQUIRED);\r\n                notContainsFind(user.errors, e => e.propName === 'userNameOrEmail'\r\n                    && e.errorMsg === allValidationErrors.INVALID_EMAIL);\r\n            });\r\n            it('Should be lowercase', () => {\r\n                const user = authUserForm({ userNameOrEmail: 'AnGeLoOcAnA@gMaIl.CoM', password: '' });\r\n                equal(user.userNameOrEmail, 'angeloocana@gmail.com');\r\n            });\r\n        });\r\n    });\r\n    describe('Password', () => {\r\n        it('Add error when null password', () => {\r\n            const user = authUserForm({ userNameOrEmail: 'angeloocana', password: null });\r\n            containsFind(user.errors, e => e.propName === 'password'\r\n                && e.errorMsg === allValidationErrors.REQUIRED);\r\n        });\r\n        it('Add error when empty password', () => {\r\n            const user = authUserForm({ userNameOrEmail: 'angeloocana', password: '' });\r\n            containsFind(user.errors, e => e.propName === 'password'\r\n                && e.errorMsg === allValidationErrors.REQUIRED);\r\n        });\r\n        it('Do not add error when valid password', () => {\r\n            const user = authUserForm({ userNameOrEmail: 'angeloocana', password: 'superSecret' });\r\n            notContainsFind(user.errors, e => e.propName === 'password'\r\n                && e.errorMsg === allValidationErrors.REQUIRED);\r\n        });\r\n        it('Add error when minlength password', () => {\r\n            const user = authUserForm({ userNameOrEmail: 'angeloocana', password: 'a' });\r\n            containsFind(user.errors, e => e.propName === 'password'\r\n                && e.errorMsg === allValidationErrors.MIN);\r\n        });\r\n        it('Add error when maxlength password', () => {\r\n            const user = authUserForm({\r\n                userNameOrEmail: 'angeloocana',\r\n                password: 'labalblhblhbohblabcascjbascijbascjbasclasbclasbash'\r\n            });\r\n            containsFind(user.errors, e => e.propName === 'password'\r\n                && e.errorMsg === allValidationErrors.MAX);\r\n        });\r\n    });\r\n});\r\n//# sourceMappingURL=AuthUserForm.test.js.map"]}