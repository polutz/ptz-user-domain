{"version":3,"sources":["../dist-esnext/User.test.js"],"names":["describe","it","user","userName","email","displayName","errors","e","propName","errorMsg","REQUIRED","MIN_LENGTH","MAX_LENGTH","INVALID_EMAIL","dbUser","newUser","updatedUser","beforeEach","id","imgUrl","passwordHash","createdBy","dtCreated","Date","ip","update","dtChanged","thereIsOtherUsers","otherUsersWithSameUserNameOrEmail","console","log","otherUser","ERROR_USER_USERNAME_IN_USE","ERROR_USER_EMAIL_IN_USE"],"mappings":"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","file":"User.test.js","sourcesContent":["import { containsFind, emptyArray, equal, notContainsFind, notEqual, notOk, ok } from 'ptz-assert';\nimport { allErrors as allValidationErrors } from 'ptz-validations';\nimport { allErrors, User } from './index';\ndescribe('User', () => {\n    describe('UserName', () => {\n        it('Add error when null username', () => {\n            const user = new User({ userName: null, email: '', displayName: '' });\n            containsFind(user.errors, e => e.propName === 'userName'\n                && e.errorMsg === allValidationErrors.REQUIRED);\n        });\n        it('Add error when empty username', () => {\n            const user = new User({ userName: '', email: '', displayName: '' });\n            containsFind(user.errors, e => e.propName === 'userName'\n                && e.errorMsg === allValidationErrors.REQUIRED);\n        });\n        it('Do not add error when valid username', () => {\n            const user = new User({ userName: 'angeloocana', email: '', displayName: '' });\n            notContainsFind(user.errors, e => e.propName === 'userName'\n                && e.errorMsg === allValidationErrors.REQUIRED);\n        });\n        it('Add error when minlength userName', () => {\n            const user = new User({ userName: 'a', email: '', displayName: '' });\n            containsFind(user.errors, e => e.propName === 'userName'\n                && e.errorMsg === allValidationErrors.MIN_LENGTH);\n        });\n        it('Add error when maxlength userName', () => {\n            const user = new User({\n                userName: 'labalblhblhbohblabcascjbascijbascjbasclasbclasbash',\n                email: '', displayName: ''\n            });\n            containsFind(user.errors, e => e.propName === 'userName'\n                && e.errorMsg === allValidationErrors.MAX_LENGTH);\n        });\n        it('Should be lowercase', () => {\n            const user = new User({ userName: 'AnGeLoOcAnA', email: '', displayName: '' });\n            equal(user.userName, 'angeloocana');\n        });\n    });\n    describe('Email', () => {\n        it('Add error when empty email', () => {\n            const user = new User({ userName: '', email: '', displayName: '' });\n            containsFind(user.errors, e => e.propName === 'email'\n                && e.errorMsg === allValidationErrors.REQUIRED);\n        });\n        it('Add error when invalid email', () => {\n            const user = new User({ userName: '', email: 'angeloocanagmail.com', displayName: '' });\n            containsFind(user.errors, e => e.propName === 'email'\n                && e.errorMsg === allValidationErrors.INVALID_EMAIL);\n        });\n        it('Do not add error when valid email', () => {\n            const user = new User({ userName: 'angeloocana', email: 'angeloocana@gmail.com', displayName: '' });\n            notContainsFind(user.errors, e => e.propName === 'email'\n                && e.errorMsg === allValidationErrors.REQUIRED);\n            notContainsFind(user.errors, e => e.propName === 'email'\n                && e.errorMsg === allValidationErrors.INVALID_EMAIL);\n        });\n        it('Should be lowercase', () => {\n            const user = new User({ userName: 'AnGeLoOcAnA', email: 'AnGeLoOcAnA@gMaIl.CoM', displayName: '' });\n            equal(user.email, 'angeloocana@gmail.com');\n        });\n    });\n    describe('Update', () => {\n        var dbUser, newUser, updatedUser;\n        beforeEach(() => {\n            dbUser = new User({\n                id: 'OldId',\n                userName: 'OldUserName',\n                email: 'alanmarcell@live.com',\n                displayName: 'Old Name',\n                imgUrl: 'OldImage',\n                passwordHash: 'OldHash',\n                createdBy: {\n                    dtCreated: new Date('1992-06-28'),\n                    ip: '192.168.0.1'\n                }\n            });\n            newUser = new User({\n                id: 'NewId',\n                userName: 'NewUserName',\n                email: 'angeloocana@gmail.com',\n                displayName: 'New Name',\n                imgUrl: 'NewImage',\n                passwordHash: 'NewHash',\n                createdBy: {\n                    dtCreated: new Date('1992-01-07'),\n                    ip: '192.168.0.1',\n                    user: {\n                        userName: 'AlanMarcell',\n                        displayName: 'Alan Marcell',\n                        email: 'alanmarcell@live.com',\n                        id: 'New_Id'\n                    }\n                }\n            });\n            updatedUser = dbUser.update(newUser);\n        });\n        it('Should not update id', () => {\n            notEqual(newUser.id, updatedUser.id);\n        });\n        it('Should not update createdBy', () => {\n            notEqual(newUser.createdBy, updatedUser.createdBy);\n        });\n        it('Should update dtChanged', () => {\n            newUser.dtChanged = new Date('1992-06-28');\n            ok(updatedUser.dtChanged);\n            ok(updatedUser.dtChanged > newUser.dtChanged);\n        });\n        it('Should add dtChanged', () => {\n            newUser.dtChanged = null;\n            ok(updatedUser.dtChanged);\n        });\n        it('Should update userName', () => {\n            equal(newUser.userName, updatedUser.userName);\n        });\n        it('Should update email', () => {\n            equal(newUser.email, updatedUser.email);\n        });\n        it('Should update emailConfirmed', () => {\n            equal(newUser.email, updatedUser.email);\n        });\n        it('Should update displayName', () => {\n            equal(newUser.displayName, updatedUser.displayName);\n        });\n        it('Should update imgUrl', () => {\n            equal(newUser.imgUrl, updatedUser.imgUrl);\n        });\n        it('Should update passwordHash', () => {\n            equal(newUser.passwordHash, updatedUser.passwordHash);\n        });\n    });\n    describe('otherUsersWithSameUserNameOrEmail', () => {\n        it('should return false when otherUsers is empty', () => {\n            const user = new User({\n                userName: 'allanegidio',\n                email: 'allan.egidio@outlook.com',\n                displayName: 'Allan Egidio'\n            });\n            const thereIsOtherUsers = user.otherUsersWithSameUserNameOrEmail([]);\n            notOk(thereIsOtherUsers);\n            console.log('******************************');\n            console.log(user);\n            console.log('******************************');\n            emptyArray(user.errors);\n        });\n        it('should return true and addError when userName already in use', () => {\n            const user = new User({\n                userName: 'allanegidio',\n                email: 'allan.egidio@outlook.com',\n                displayName: 'Allan Egidio'\n            });\n            const otherUser = {\n                userName: 'allanegidio',\n                email: 'angeloocana@gmail.com',\n                displayName: 'Angelo Ocana'\n            };\n            const thereIsOtherUsers = user.otherUsersWithSameUserNameOrEmail([otherUser]);\n            ok(thereIsOtherUsers);\n            containsFind(user.errors, e => e.propName === 'userName'\n                && e.errorMsg === allErrors.ERROR_USER_USERNAME_IN_USE);\n        });\n        it('should return true and addError when email already in use', () => {\n            const user = new User({\n                userName: 'allanegidio',\n                email: 'allan.egidio@outlook.com',\n                displayName: 'Allan Egidio'\n            });\n            const otherUser = {\n                userName: 'angeloocana',\n                email: 'allan.egidio@outlook.com',\n                displayName: 'Allan Egidio'\n            };\n            const thereIsOtherUsers = user.otherUsersWithSameUserNameOrEmail([otherUser]);\n            ok(thereIsOtherUsers);\n            containsFind(user.errors, e => e.propName === 'email'\n                && e.errorMsg === allErrors.ERROR_USER_EMAIL_IN_USE);\n        });\n    });\n});\n//# sourceMappingURL=User.test.js.map"]}