{"version":3,"sources":["../dist-esnext/createUser.test.js"],"names":["assert","V","User","describe","it","user","createUser","userName","email","displayName","containsFind","errors","e","propName","errorMsg","allErrors","REQUIRED","notContainsFind","MIN_LENGTH","MAX_LENGTH","equal","INVALID_EMAIL","userBefore","userAfter","otherUsersWithSameUserNameOrEmail","emptyArray","otherUser","error","ERROR_USER_USERNAME_IN_USE","ok","containsError","ERROR_USER_EMAIL_IN_USE","throws"],"mappings":"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","file":"createUser.test.js","sourcesContent":["import * as assert from 'ptz-assert';\nimport * as V from 'ptz-validations';\nimport * as User from './index';\ndescribe('createUser', () => {\n    describe('UserName', () => {\n        it('Add error when null username', () => {\n            const user = User.createUser({ userName: null, email: '', displayName: '' });\n            assert.containsFind(user.errors, e => e.propName === 'userName'\n                && e.errorMsg === V.allErrors.REQUIRED);\n        });\n        it('Add error when empty username', () => {\n            const user = User.createUser({ userName: '', email: '', displayName: '' });\n            assert.containsFind(user.errors, e => e.propName === 'userName'\n                && e.errorMsg === V.allErrors.REQUIRED);\n        });\n        it('Do not add error when valid username', () => {\n            const user = User.createUser({ userName: 'angeloocana', email: '', displayName: '' });\n            assert.notContainsFind(user.errors, e => e.propName === 'userName'\n                && e.errorMsg === V.allErrors.REQUIRED);\n        });\n        it('Add error when minLength userName', () => {\n            const user = User.createUser({ userName: 'a', email: '', displayName: '' });\n            assert.containsFind(user.errors, e => e.propName === 'userName'\n                && e.errorMsg === V.allErrors.MIN_LENGTH);\n        });\n        it('Add error when maxLength userName', () => {\n            const user = User.createUser({\n                userName: 'labalblhblhbohblabcascjbascijbascjbasclasbclasbash',\n                email: '', displayName: ''\n            });\n            assert.containsFind(user.errors, e => e.propName === 'userName'\n                && e.errorMsg === V.allErrors.MAX_LENGTH);\n        });\n        it('Should be lowercase', () => {\n            const user = User.createUser({ userName: 'AnGeLoOcAnA', email: '', displayName: '' });\n            assert.equal(user.userName, 'angeloocana');\n        });\n    });\n    describe('Email', () => {\n        it('Add error when empty email', () => {\n            const user = User.createUser({ userName: '', email: '', displayName: '' });\n            assert.containsFind(user.errors, e => e.propName === 'email'\n                && e.errorMsg === V.allErrors.REQUIRED);\n        });\n        it('Add error when invalid email', () => {\n            const user = User.createUser({ userName: '', email: 'angeloocanagmail.com', displayName: '' });\n            assert.containsFind(user.errors, e => e.propName === 'email'\n                && e.errorMsg === V.allErrors.INVALID_EMAIL);\n        });\n        it('Do not add error when valid email', () => {\n            const user = User.createUser({ userName: 'angeloocana', email: 'angeloocana@gmail.com', displayName: '' });\n            assert.notContainsFind(user.errors, e => e.propName === 'email'\n                && e.errorMsg === V.allErrors.REQUIRED);\n            assert.notContainsFind(user.errors, e => e.propName === 'email'\n                && e.errorMsg === V.allErrors.INVALID_EMAIL);\n        });\n        it('Should be lowercase', () => {\n            const user = User.createUser({ userName: 'AnGeLoOcAnA', email: 'AnGeLoOcAnA@gMaIl.CoM', displayName: '' });\n            assert.equal(user.email, 'angeloocana@gmail.com');\n        });\n    });\n    describe('otherUsersWithSameUserNameOrEmail', () => {\n        it('do NOT add error when otherUsers is empty', () => {\n            const userBefore = User.createUser({\n                userName: 'allanegidio',\n                email: 'allan.egidio@outlook.com',\n                displayName: 'Allan Egidio'\n            });\n            const userAfter = User.otherUsersWithSameUserNameOrEmail(userBefore, []);\n            assert.emptyArray(userAfter.errors);\n        });\n        it('do NOT add error when otherUsers is null', () => {\n            const userBefore = User.createUser({\n                userName: 'allanegidio',\n                email: 'allan.egidio@outlook.com',\n                displayName: 'Allan Egidio'\n            });\n            const userAfter = User.otherUsersWithSameUserNameOrEmail(userBefore, null);\n            assert.emptyArray(userAfter.errors);\n        });\n        it('add error when userName already in use', () => {\n            const userBefore = User.createUser({\n                userName: 'allanegidio',\n                email: 'allan.egidio@outlook.com',\n                displayName: 'Allan Egidio'\n            });\n            const otherUser = {\n                userName: 'allanegidio',\n                email: 'angeloocana@gmail.com',\n                displayName: 'Angelo Ocana'\n            };\n            const userAfter = User.otherUsersWithSameUserNameOrEmail(userBefore, [otherUser]);\n            const error = { propName: 'userName', errorMsg: User.allErrors.ERROR_USER_USERNAME_IN_USE };\n            assert.ok(V.containsError(error, userAfter.errors));\n        });\n        it('add error when email already in use', () => {\n            const userBefore = User.createUser({\n                userName: 'allanegidio',\n                email: 'allan.egidio@outlook.com',\n                displayName: 'Allan Egidio'\n            });\n            const otherUser = {\n                userName: 'angeloocana',\n                email: 'allan.egidio@outlook.com',\n                displayName: 'Allan Egidio'\n            };\n            const userAfter = User.otherUsersWithSameUserNameOrEmail(userBefore, [otherUser]);\n            const error = { propName: 'email', errorMsg: User.allErrors.ERROR_USER_EMAIL_IN_USE };\n            assert.ok(V.containsError(error, userAfter.errors));\n        });\n    });\n    it('throw error when null args', () => {\n        assert.throws(() => User.createUser(null));\n    });\n});\n//# sourceMappingURL=createUser.test.js.map"]}