{"version":3,"sources":["../dist-esnext/createUser.test.js"],"names":["assert","V","User","describe","it","user","createUser","userName","email","displayName","containsFind","errors","e","propName","errorMsg","allErrors","REQUIRED","notContainsFind","MIN","MAX","equal","INVALID_EMAIL","throws"],"mappings":";;AAAA;;IAAYA,M;;AACZ;;IAAYC,C;;AACZ;;IAAYC,I;;;;AACZC,SAAS,YAAT,EAAuB,MAAM;AACzBA,aAAS,UAAT,EAAqB,MAAM;AACvBC,WAAG,8BAAH,EAAmC,MAAM;AACrC,kBAAMC,OAAOH,KAAKI,UAAL,CAAgB,EAAEC,UAAU,IAAZ,EAAkBC,OAAO,EAAzB,EAA6BC,aAAa,EAA1C,EAAhB,CAAb;AACAT,mBAAOU,YAAP,CAAoBL,KAAKM,MAAzB,EAAiCC,KAAKA,EAAEC,QAAF,KAAe,UAAf,IAC/BD,EAAEE,QAAF,KAAeb,EAAEc,SAAF,CAAYC,QADlC;AAEH,SAJD;AAKAZ,WAAG,+BAAH,EAAoC,MAAM;AACtC,kBAAMC,OAAOH,KAAKI,UAAL,CAAgB,EAAEC,UAAU,EAAZ,EAAgBC,OAAO,EAAvB,EAA2BC,aAAa,EAAxC,EAAhB,CAAb;AACAT,mBAAOU,YAAP,CAAoBL,KAAKM,MAAzB,EAAiCC,KAAKA,EAAEC,QAAF,KAAe,UAAf,IAC/BD,EAAEE,QAAF,KAAeb,EAAEc,SAAF,CAAYC,QADlC;AAEH,SAJD;AAKAZ,WAAG,sCAAH,EAA2C,MAAM;AAC7C,kBAAMC,OAAOH,KAAKI,UAAL,CAAgB,EAAEC,UAAU,aAAZ,EAA2BC,OAAO,EAAlC,EAAsCC,aAAa,EAAnD,EAAhB,CAAb;AACAT,mBAAOiB,eAAP,CAAuBZ,KAAKM,MAA5B,EAAoCC,KAAKA,EAAEC,QAAF,KAAe,UAAf,IAClCD,EAAEE,QAAF,KAAeb,EAAEc,SAAF,CAAYC,QADlC;AAEH,SAJD;AAKAZ,WAAG,mCAAH,EAAwC,MAAM;AAC1C,kBAAMC,OAAOH,KAAKI,UAAL,CAAgB,EAAEC,UAAU,GAAZ,EAAiBC,OAAO,EAAxB,EAA4BC,aAAa,EAAzC,EAAhB,CAAb;AACAT,mBAAOU,YAAP,CAAoBL,KAAKM,MAAzB,EAAiCC,KAAKA,EAAEC,QAAF,KAAe,UAAf,IAC/BD,EAAEE,QAAF,KAAeb,EAAEc,SAAF,CAAYG,GADlC;AAEH,SAJD;AAKAd,WAAG,mCAAH,EAAwC,MAAM;AAC1C,kBAAMC,OAAOH,KAAKI,UAAL,CAAgB;AACzBC,0BAAU,oDADe;AAEzBC,uBAAO,EAFkB,EAEdC,aAAa;AAFC,aAAhB,CAAb;AAIAT,mBAAOU,YAAP,CAAoBL,KAAKM,MAAzB,EAAiCC,KAAKA,EAAEC,QAAF,KAAe,UAAf,IAC/BD,EAAEE,QAAF,KAAeb,EAAEc,SAAF,CAAYI,GADlC;AAEH,SAPD;AAQAf,WAAG,qBAAH,EAA0B,MAAM;AAC5B,kBAAMC,OAAOH,KAAKI,UAAL,CAAgB,EAAEC,UAAU,aAAZ,EAA2BC,OAAO,EAAlC,EAAsCC,aAAa,EAAnD,EAAhB,CAAb;AACAT,mBAAOoB,KAAP,CAAaf,KAAKE,QAAlB,EAA4B,aAA5B;AACH,SAHD;AAIH,KAjCD;AAkCAJ,aAAS,OAAT,EAAkB,MAAM;AACpBC,WAAG,4BAAH,EAAiC,MAAM;AACnC,kBAAMC,OAAOH,KAAKI,UAAL,CAAgB,EAAEC,UAAU,EAAZ,EAAgBC,OAAO,EAAvB,EAA2BC,aAAa,EAAxC,EAAhB,CAAb;AACAT,mBAAOU,YAAP,CAAoBL,KAAKM,MAAzB,EAAiCC,KAAKA,EAAEC,QAAF,KAAe,OAAf,IAC/BD,EAAEE,QAAF,KAAeb,EAAEc,SAAF,CAAYC,QADlC;AAEH,SAJD;AAKAZ,WAAG,8BAAH,EAAmC,MAAM;AACrC,kBAAMC,OAAOH,KAAKI,UAAL,CAAgB,EAAEC,UAAU,EAAZ,EAAgBC,OAAO,sBAAvB,EAA+CC,aAAa,EAA5D,EAAhB,CAAb;AACAT,mBAAOU,YAAP,CAAoBL,KAAKM,MAAzB,EAAiCC,KAAKA,EAAEC,QAAF,KAAe,OAAf,IAC/BD,EAAEE,QAAF,KAAeb,EAAEc,SAAF,CAAYM,aADlC;AAEH,SAJD;AAKAjB,WAAG,mCAAH,EAAwC,MAAM;AAC1C,kBAAMC,OAAOH,KAAKI,UAAL,CAAgB,EAAEC,UAAU,aAAZ,EAA2BC,OAAO,uBAAlC,EAA2DC,aAAa,EAAxE,EAAhB,CAAb;AACAT,mBAAOiB,eAAP,CAAuBZ,KAAKM,MAA5B,EAAoCC,KAAKA,EAAEC,QAAF,KAAe,OAAf,IAClCD,EAAEE,QAAF,KAAeb,EAAEc,SAAF,CAAYC,QADlC;AAEAhB,mBAAOiB,eAAP,CAAuBZ,KAAKM,MAA5B,EAAoCC,KAAKA,EAAEC,QAAF,KAAe,OAAf,IAClCD,EAAEE,QAAF,KAAeb,EAAEc,SAAF,CAAYM,aADlC;AAEH,SAND;AAOAjB,WAAG,qBAAH,EAA0B,MAAM;AAC5B,kBAAMC,OAAOH,KAAKI,UAAL,CAAgB,EAAEC,UAAU,aAAZ,EAA2BC,OAAO,uBAAlC,EAA2DC,aAAa,EAAxE,EAAhB,CAAb;AACAT,mBAAOoB,KAAP,CAAaf,KAAKG,KAAlB,EAAyB,uBAAzB;AACH,SAHD;AAIH,KAtBD;AAuBAJ,OAAG,4BAAH,EAAiC,MAAM;AACnCJ,eAAOsB,MAAP,CAAc,MAAMpB,KAAKI,UAAL,CAAgB,IAAhB,CAApB;AACH,KAFD;AAGH,CA7DD;AA8DA","file":"createUser.test.js","sourcesContent":["import * as assert from 'ptz-assert';\r\nimport * as V from 'ptz-validations';\r\nimport * as User from './createUser';\r\ndescribe('createUser', () => {\r\n    describe('UserName', () => {\r\n        it('Add error when null username', () => {\r\n            const user = User.createUser({ userName: null, email: '', displayName: '' });\r\n            assert.containsFind(user.errors, e => e.propName === 'userName'\r\n                && e.errorMsg === V.allErrors.REQUIRED);\r\n        });\r\n        it('Add error when empty username', () => {\r\n            const user = User.createUser({ userName: '', email: '', displayName: '' });\r\n            assert.containsFind(user.errors, e => e.propName === 'userName'\r\n                && e.errorMsg === V.allErrors.REQUIRED);\r\n        });\r\n        it('Do not add error when valid username', () => {\r\n            const user = User.createUser({ userName: 'angeloocana', email: '', displayName: '' });\r\n            assert.notContainsFind(user.errors, e => e.propName === 'userName'\r\n                && e.errorMsg === V.allErrors.REQUIRED);\r\n        });\r\n        it('Add error when minLength userName', () => {\r\n            const user = User.createUser({ userName: 'a', email: '', displayName: '' });\r\n            assert.containsFind(user.errors, e => e.propName === 'userName'\r\n                && e.errorMsg === V.allErrors.MIN);\r\n        });\r\n        it('Add error when maxLength userName', () => {\r\n            const user = User.createUser({\r\n                userName: 'labalblhblhbohblabcascjbascijbascjbasclasbclasbash',\r\n                email: '', displayName: ''\r\n            });\r\n            assert.containsFind(user.errors, e => e.propName === 'userName'\r\n                && e.errorMsg === V.allErrors.MAX);\r\n        });\r\n        it('Should be lowercase', () => {\r\n            const user = User.createUser({ userName: 'AnGeLoOcAnA', email: '', displayName: '' });\r\n            assert.equal(user.userName, 'angeloocana');\r\n        });\r\n    });\r\n    describe('Email', () => {\r\n        it('Add error when empty email', () => {\r\n            const user = User.createUser({ userName: '', email: '', displayName: '' });\r\n            assert.containsFind(user.errors, e => e.propName === 'email'\r\n                && e.errorMsg === V.allErrors.REQUIRED);\r\n        });\r\n        it('Add error when invalid email', () => {\r\n            const user = User.createUser({ userName: '', email: 'angeloocanagmail.com', displayName: '' });\r\n            assert.containsFind(user.errors, e => e.propName === 'email'\r\n                && e.errorMsg === V.allErrors.INVALID_EMAIL);\r\n        });\r\n        it('Do not add error when valid email', () => {\r\n            const user = User.createUser({ userName: 'angeloocana', email: 'angeloocana@gmail.com', displayName: '' });\r\n            assert.notContainsFind(user.errors, e => e.propName === 'email'\r\n                && e.errorMsg === V.allErrors.REQUIRED);\r\n            assert.notContainsFind(user.errors, e => e.propName === 'email'\r\n                && e.errorMsg === V.allErrors.INVALID_EMAIL);\r\n        });\r\n        it('Should be lowercase', () => {\r\n            const user = User.createUser({ userName: 'AnGeLoOcAnA', email: 'AnGeLoOcAnA@gMaIl.CoM', displayName: '' });\r\n            assert.equal(user.email, 'angeloocana@gmail.com');\r\n        });\r\n    });\r\n    it('throw error when null args', () => {\r\n        assert.throws(() => User.createUser(null));\r\n    });\r\n});\r\n//# sourceMappingURL=createUser.test.js.map"]}