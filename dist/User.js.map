{"version":3,"sources":["../dist-esnext/User.js"],"names":["User","args","ERROR_EMPTY_USER","validate","validations","userName","email","displayName","password","emailConfirmed","imgUrl","passwordHash","otherUsers","hasError","filter","user","length","addError","propName","errorMsg","ERROR_USER_USERNAME_IN_USE","ERROR_USER_EMAIL_IN_USE","newUser","dtChanged","Date","required","minLength","maxLength","toLowerCase"],"mappings":";;;;;;;;;AAAA;;AACA;;;;AACA;;;;;;;;;;;;IACaA,I,WAAAA,I;;;AACT,kBAAYC,IAAZ,EAAkB;AAAA;;AACd,YAAI,CAACA,IAAL,EACI,MAAM,oBAAUC,gBAAhB;;AAFU,gHAGRD,IAHQ;;AAIdA,eAAO,MAAKE,QAAL,CAAcH,KAAKI,WAAnB,EAAgCH,IAAhC,CAAP;AACA,cAAKI,QAAL,GAAgBJ,KAAKI,QAArB;AACA,cAAKC,KAAL,GAAaL,KAAKK,KAAlB;AACA,cAAKC,WAAL,GAAmBN,KAAKM,WAAxB;AACA,cAAKC,QAAL,GAAgBP,KAAKO,QAArB;AACA,cAAKC,cAAL,GAAsBR,KAAKQ,cAA3B;AACA,cAAKC,MAAL,GAAcT,KAAKS,MAAnB;AACA,cAAKC,YAAL,GAAoBV,KAAKU,YAAzB;AAXc;AAYjB;;;;0DACiCC,U,EAAY;AAAA;;AAC1C,gBAAI,CAACA,UAAL,EACI,OAAO,KAAP;AACJ,gBAAIC,WAAW,KAAf;AACA,gBAAID,WAAWE,MAAX,CAAkB;AAAA,uBAAQC,KAAKV,QAAL,KAAkB,OAAKA,QAA/B;AAAA,aAAlB,EAA2DW,MAA3D,GAAoE,CAAxE,EAA2E;AACvE,qBAAKC,QAAL,CAAc;AACVC,8BAAU,UADA;AAEVC,8BAAU,oBAAUC;AAFV,iBAAd;AAIAP,2BAAW,IAAX;AACH;AACD,gBAAID,WAAWE,MAAX,CAAkB;AAAA,uBAAQC,KAAKT,KAAL,KAAe,OAAKA,KAA5B;AAAA,aAAlB,EAAqDU,MAArD,GAA8D,CAAlE,EAAqE;AACjE,qBAAKC,QAAL,CAAc;AACVC,8BAAU,OADA;AAEVC,8BAAU,oBAAUE;AAFV,iBAAd;AAIAR,2BAAW,IAAX;AACH;AACD,mBAAOA,QAAP;AACH;;;+BACMS,O,EAAS;AACZ,iBAAKjB,QAAL,GAAgBiB,QAAQjB,QAAxB;AACA,iBAAKC,KAAL,GAAagB,QAAQhB,KAArB;AACA,iBAAKC,WAAL,GAAmBe,QAAQf,WAA3B;AACA,iBAAKI,YAAL,GAAoBW,QAAQX,YAA5B;AACA,iBAAKD,MAAL,GAAcY,QAAQZ,MAAtB;AACA,iBAAKa,SAAL,GAAiB,IAAIC,IAAJ,EAAjB;AACA,mBAAO,IAAP;AACH;;;;;;AAELxB,KAAKI,WAAL,GAAmB;AACfG,iBAAa,oCAAe;AACxBkB,kBAAU,IADc;AAExBC,mBAAW,CAFa;AAGxBC,mBAAW;AAHa,KAAf,CADE;AAMftB,cAAU,oCAAe;AACrBoB,kBAAU,IADW;AAErBC,mBAAW,CAFU;AAGrBC,mBAAW,EAHU;AAIrBC,qBAAa;AAJQ,KAAf,CANK;AAYfpB,cAAU,oCAAe;AACrBiB,kBAAU,KADW;AAErBC,mBAAW,CAFU;AAGrBC,mBAAW;AAHU,KAAf,CAZK;AAiBfrB,WAAO,mCAAc;AACjBmB,kBAAU;AADO,KAAd;AAjBQ,CAAnB;AAqBA","file":"User.js","sourcesContent":["import { validateEmail, validateString } from 'ptz-validations';\nimport allErrors from './allErrors';\nimport EntityBase from './EntityBase';\nexport class User extends EntityBase {\n    constructor(args) {\n        if (!args)\n            throw allErrors.ERROR_EMPTY_USER;\n        super(args);\n        args = this.validate(User.validations, args);\n        this.userName = args.userName;\n        this.email = args.email;\n        this.displayName = args.displayName;\n        this.password = args.password;\n        this.emailConfirmed = args.emailConfirmed;\n        this.imgUrl = args.imgUrl;\n        this.passwordHash = args.passwordHash;\n    }\n    otherUsersWithSameUserNameOrEmail(otherUsers) {\n        if (!otherUsers)\n            return false;\n        var hasError = false;\n        if (otherUsers.filter(user => user.userName === this.userName).length > 0) {\n            this.addError({\n                propName: 'userName',\n                errorMsg: allErrors.ERROR_USER_USERNAME_IN_USE\n            });\n            hasError = true;\n        }\n        if (otherUsers.filter(user => user.email === this.email).length > 0) {\n            this.addError({\n                propName: 'email',\n                errorMsg: allErrors.ERROR_USER_EMAIL_IN_USE\n            });\n            hasError = true;\n        }\n        return hasError;\n    }\n    update(newUser) {\n        this.userName = newUser.userName;\n        this.email = newUser.email;\n        this.displayName = newUser.displayName;\n        this.passwordHash = newUser.passwordHash;\n        this.imgUrl = newUser.imgUrl;\n        this.dtChanged = new Date();\n        return this;\n    }\n}\nUser.validations = {\n    displayName: validateString({\n        required: true,\n        minLength: 2,\n        maxLength: 50\n    }),\n    userName: validateString({\n        required: true,\n        minLength: 3,\n        maxLength: 30,\n        toLowerCase: true\n    }),\n    password: validateString({\n        required: false,\n        minLength: 6,\n        maxLength: 30\n    }),\n    email: validateEmail({\n        required: true\n    })\n};\n//# sourceMappingURL=User.js.map"]}