{"version":3,"sources":["../dist-esnext/otherUsersWithSameUserNameOrEmail.test.js"],"names":["assert","V","User","describe","it","userBefore","createUser","userName","email","displayName","userAfter","otherUsersWithSameUserNameOrEmail","emptyArray","errors","otherUser","error","propName","errorMsg","allErrors","ERROR_USER_USERNAME_IN_USE","ok","containsError","ERROR_USER_EMAIL_IN_USE"],"mappings":";;AAAA;;IAAYA,M;;AACZ;;IAAYC,C;;AACZ;;IAAYC,I;;;;AACZC,SAAS,mCAAT,EAA8C,MAAM;AAChDC,OAAG,2CAAH,EAAgD,MAAM;AAClD,cAAMC,aAAaH,KAAKI,UAAL,CAAgB;AAC/BC,sBAAU,aADqB;AAE/BC,mBAAO,0BAFwB;AAG/BC,yBAAa;AAHkB,SAAhB,CAAnB;AAKA,cAAMC,YAAYR,KAAKS,iCAAL,CAAuCN,UAAvC,EAAmD,EAAnD,CAAlB;AACAL,eAAOY,UAAP,CAAkBF,UAAUG,MAA5B;AACH,KARD;AASAT,OAAG,0CAAH,EAA+C,MAAM;AACjD,cAAMC,aAAaH,KAAKI,UAAL,CAAgB;AAC/BC,sBAAU,aADqB;AAE/BC,mBAAO,0BAFwB;AAG/BC,yBAAa;AAHkB,SAAhB,CAAnB;AAKA,cAAMC,YAAYR,KAAKS,iCAAL,CAAuCN,UAAvC,EAAmD,IAAnD,CAAlB;AACAL,eAAOY,UAAP,CAAkBF,UAAUG,MAA5B;AACH,KARD;AASAT,OAAG,wCAAH,EAA6C,MAAM;AAC/C,cAAMC,aAAaH,KAAKI,UAAL,CAAgB;AAC/BC,sBAAU,aADqB;AAE/BC,mBAAO,0BAFwB;AAG/BC,yBAAa;AAHkB,SAAhB,CAAnB;AAKA,cAAMK,YAAY;AACdP,sBAAU,aADI;AAEdC,mBAAO,uBAFO;AAGdC,yBAAa;AAHC,SAAlB;AAKA,cAAMC,YAAYR,KAAKS,iCAAL,CAAuCN,UAAvC,EAAmD,CAACS,SAAD,CAAnD,CAAlB;AACA,cAAMC,QAAQ,EAAEC,UAAU,UAAZ,EAAwBC,UAAUf,KAAKgB,SAAL,CAAeC,0BAAjD,EAAd;AACAnB,eAAOoB,EAAP,CAAUnB,EAAEoB,aAAF,CAAgBN,KAAhB,EAAuBL,UAAUG,MAAjC,CAAV;AACH,KAdD;AAeAT,OAAG,qCAAH,EAA0C,MAAM;AAC5C,cAAMC,aAAaH,KAAKI,UAAL,CAAgB;AAC/BC,sBAAU,aADqB;AAE/BC,mBAAO,0BAFwB;AAG/BC,yBAAa;AAHkB,SAAhB,CAAnB;AAKA,cAAMK,YAAY;AACdP,sBAAU,aADI;AAEdC,mBAAO,0BAFO;AAGdC,yBAAa;AAHC,SAAlB;AAKA,cAAMC,YAAYR,KAAKS,iCAAL,CAAuCN,UAAvC,EAAmD,CAACS,SAAD,CAAnD,CAAlB;AACA,cAAMC,QAAQ,EAAEC,UAAU,OAAZ,EAAqBC,UAAUf,KAAKgB,SAAL,CAAeI,uBAA9C,EAAd;AACAtB,eAAOoB,EAAP,CAAUnB,EAAEoB,aAAF,CAAgBN,KAAhB,EAAuBL,UAAUG,MAAjC,CAAV;AACH,KAdD;AAeH,CAjDD;AAkDA","file":"otherUsersWithSameUserNameOrEmail.test.js","sourcesContent":["import * as assert from 'ptz-assert';\r\nimport * as V from 'ptz-validations';\r\nimport * as User from './index';\r\ndescribe('otherUsersWithSameUserNameOrEmail', () => {\r\n    it('do NOT add error when otherUsers is empty', () => {\r\n        const userBefore = User.createUser({\r\n            userName: 'allanegidio',\r\n            email: 'allan.egidio@outlook.com',\r\n            displayName: 'Allan Egidio'\r\n        });\r\n        const userAfter = User.otherUsersWithSameUserNameOrEmail(userBefore, []);\r\n        assert.emptyArray(userAfter.errors);\r\n    });\r\n    it('do NOT add error when otherUsers is null', () => {\r\n        const userBefore = User.createUser({\r\n            userName: 'allanegidio',\r\n            email: 'allan.egidio@outlook.com',\r\n            displayName: 'Allan Egidio'\r\n        });\r\n        const userAfter = User.otherUsersWithSameUserNameOrEmail(userBefore, null);\r\n        assert.emptyArray(userAfter.errors);\r\n    });\r\n    it('add error when userName already in use', () => {\r\n        const userBefore = User.createUser({\r\n            userName: 'allanegidio',\r\n            email: 'allan.egidio@outlook.com',\r\n            displayName: 'Allan Egidio'\r\n        });\r\n        const otherUser = {\r\n            userName: 'allanegidio',\r\n            email: 'angeloocana@gmail.com',\r\n            displayName: 'Angelo Ocana'\r\n        };\r\n        const userAfter = User.otherUsersWithSameUserNameOrEmail(userBefore, [otherUser]);\r\n        const error = { propName: 'userName', errorMsg: User.allErrors.ERROR_USER_USERNAME_IN_USE };\r\n        assert.ok(V.containsError(error, userAfter.errors));\r\n    });\r\n    it('add error when email already in use', () => {\r\n        const userBefore = User.createUser({\r\n            userName: 'allanegidio',\r\n            email: 'allan.egidio@outlook.com',\r\n            displayName: 'Allan Egidio'\r\n        });\r\n        const otherUser = {\r\n            userName: 'angeloocana',\r\n            email: 'allan.egidio@outlook.com',\r\n            displayName: 'Allan Egidio'\r\n        };\r\n        const userAfter = User.otherUsersWithSameUserNameOrEmail(userBefore, [otherUser]);\r\n        const error = { propName: 'email', errorMsg: User.allErrors.ERROR_USER_EMAIL_IN_USE };\r\n        assert.ok(V.containsError(error, userAfter.errors));\r\n    });\r\n});\r\n//# sourceMappingURL=otherUsersWithSameUserNameOrEmail.test.js.map"]}